generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  phone         String?
  dateOfBirth   String?
  password      String?
  role          Role?           @default(User)
  createdDate   DateTime?       @default(now())
  accounts      Account[]
  bookreviews   bookreviews[]
  boookorders   boookorders[]
  coursereviews coursereviews[]
  messages      messages[]
  usercourses   usercourses[]

  @@map("users")
}

model bookreviews {
  id          String    @id
  userId      String
  bookId      String
  review      String
  createdDate DateTime? @default(now())
  books       books     @relation(fields: [bookId], references: [id], map: "BookReviews_bookId_fkey")
  users       User      @relation(fields: [userId], references: [id], map: "BookReviews_userId_fkey")

  @@index([bookId], map: "BookReviews_bookId_fkey")
  @@index([userId], map: "BookReviews_userId_fkey")
}

model books {
  id          String        @id
  title       String
  author      String
  pages       String
  price       String
  image       String?
  createdDate DateTime?     @default(now())
  bookreviews bookreviews[]
  boookorders boookorders[]
}

model boookorders {
  id           String    @id
  userId       String
  bookId       String
  address      String
  orderConfirm Boolean   @default(false)
  createdDate  DateTime? @default(now())
  books        books     @relation(fields: [bookId], references: [id], map: "BoookOrders_bookId_fkey")
  users        User      @relation(fields: [userId], references: [id], map: "BoookOrders_userId_fkey")

  @@index([bookId], map: "BoookOrders_bookId_fkey")
  @@index([userId], map: "BoookOrders_userId_fkey")
}

model coursedetails {
  id          String    @id
  courseId    String
  couseDetail String
  createdDate DateTime? @default(now())
  courses     courses   @relation(fields: [courseId], references: [id], map: "CourseDetails_courseId_fkey")

  @@index([courseId], map: "CourseDetails_courseId_fkey")
}

model coursedocuments {
  id          String    @id
  courseId    String
  documentId  String
  createdDate DateTime? @default(now())
  courses     courses   @relation(fields: [courseId], references: [id], map: "CourseDocuments_courseId_fkey")
  documents   documents @relation(fields: [documentId], references: [id], map: "CourseDocuments_documentId_fkey")

  @@index([courseId], map: "CourseDocuments_courseId_fkey")
  @@index([documentId], map: "CourseDocuments_documentId_fkey")
}

model coursereviews {
  id          String    @id
  userId      String
  courseId    String
  review      String
  createdDate DateTime? @default(now())
  courses     courses   @relation(fields: [courseId], references: [id], map: "CourseReviews_courseId_fkey")
  users       User      @relation(fields: [userId], references: [id], map: "CourseReviews_userId_fkey")

  @@index([courseId], map: "CourseReviews_courseId_fkey")
  @@index([userId], map: "CourseReviews_userId_fkey")
}

model courses {
  id                 String            @id
  levelId            String
  statusId           String
  cName              String
  image              String?
  video              String?
  description        String?
  videoLabel         String
  cHour              String
  cPractice          String
  zoomFee            String?
  teachYourSelfField String?
  createdDate        DateTime?         @default(now())
  coursedetails      coursedetails[]
  coursedocuments    coursedocuments[]
  coursereviews      coursereviews[]
  levels             levels            @relation(fields: [levelId], references: [id], map: "Courses_levelId_fkey")
  status             status            @relation(fields: [statusId], references: [id], map: "Courses_statusId_fkey")
  exercises          exercises[]
  lectures           lectures[]
  usercourses        usercourses[]

  @@index([levelId], map: "Courses_levelId_fkey")
  @@index([statusId], map: "Courses_statusId_fkey")
}

model documents {
  id              String            @id
  dname           String
  dlink           String
  createdDate     DateTime?         @default(now())
  coursedocuments coursedocuments[]
}

model exercises {
  id          String      @id
  ename       String
  courseId    String
  createdDate DateTime?   @default(now())
  courses     courses     @relation(fields: [courseId], references: [id], map: "Exercises_courseId_fkey")
  questions   questions[]

  @@index([courseId], map: "Exercises_courseId_fkey")
}

model lecturedetails {
  id                String    @id
  lectureDetailName String
  lectureLink       String
  lectureId         String
  createdDate       DateTime? @default(now())
  lectures          lectures  @relation(fields: [lectureId], references: [id], map: "LectureDetails_lectureId_fkey")

  @@index([lectureId], map: "LectureDetails_lectureId_fkey")
}

model lectures {
  id             String           @id
  title          String
  courseId       String
  createdDate    DateTime?        @default(now())
  lecturedetails lecturedetails[]
  courses        courses          @relation(fields: [courseId], references: [id], map: "Lectures_courseId_fkey")

  @@index([courseId], map: "Lectures_courseId_fkey")
}

model levels {
  id          String    @id
  level       String
  createdDate DateTime? @default(now())
  courses     courses[]
}

model messages {
  id          String    @id
  userId      String
  message     String
  createdDate DateTime? @default(now())
  users       User      @relation(fields: [userId], references: [id], map: "Messages_userId_fkey")

  @@index([userId], map: "Messages_userId_fkey")
}

model questions {
  id                  String    @id
  questionDescription String
  sample              String
  questionImage       String?
  exerciseId          String
  createdDate         DateTime? @default(now())
  exercises           exercises @relation(fields: [exerciseId], references: [id], map: "Questions_exerciseId_fkey")

  @@index([exerciseId], map: "Questions_exerciseId_fkey")
}

model status {
  id          String    @id
  status      String
  createdDate DateTime? @default(now())
  courses     courses[]
}

model usercourses {
  id          String    @id
  courseId    String
  userId      String
  isConfirm   Boolean   @default(false)
  createdDate DateTime? @default(now())
  courses     courses   @relation(fields: [courseId], references: [id], map: "UserCourses_courseId_fkey")
  users       User      @relation(fields: [userId], references: [id], map: "UserCourses_userId_fkey")

  @@index([courseId], map: "UserCourses_courseId_fkey")
  @@index([userId], map: "UserCourses_userId_fkey")
}

enum Role {
  Admin
  User
}
